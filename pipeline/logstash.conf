input {

    ##JDBC Plugin to Query Data from MySQL
    jdbc {
        type => "kundendaten"
        jdbc_driver_library => "/driver/mysql-connector-java-8.0.19.jar"
        jdbc_driver_class => "com.mysql.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://localhost:3306/codingsolo"
        jdbc_user => "elastic"
		jdbc_password => "elastic"
        schedule => "* * * * *"
        statement => "SELECT * FROM
						(SELECT kunde.id, 
						kunde.kunde_vorname, 
						kunde.kunde_name, 
						kunde.kunde_kundennummer, 
						kunde.kunde_sperrung, 
						kunde.kunde_geburtsdatum,
						kunde.kunde_erstellung,
						(SELECT GREATEST(MAX(kunde.kunde_bearbeitet), MAX(anschrift.anschrift_bearbeitet), MAX(bestellung.bestellung_bearbeitet))) as latest_update
						FROM codingsolo.kunde as kunde
						INNER JOIN codingsolo.kunde_anschrift ON kunde.id=codingsolo.kunde_anschrift.kunde_id
						INNER JOIN codingsolo.anschrift as anschrift ON codingsolo.kunde_anschrift.anschrift_id = anschrift.id
						INNER JOIN codingsolo.bestellung as bestellung ON kunde.id = bestellung.kunde_id 
						GROUP BY 
						kunde.id, 
						kunde.kunde_vorname, 
						kunde.kunde_name, 
						kunde.kunde_kundennummer, 
						kunde.kunde_sperrung, 
						kunde.kunde_geburtsdatum)alias 
					WHERE latest_update >:sql_last_value;"
		use_column_value => true
		tracking_column => "latest_update"
		tracking_column_type => "timestamp"                    
    }
    

}

filter {
    ##Check you are working with the correct type
    if[type] == "kundendaten" {

        ##jdbc_streaming Plugin to add Data from different Tables / Databases
        jdbc_streaming {
            jdbc_driver_library => "/driver/mysql-connector-java-8.0.19.jar"
            jdbc_driver_class => "com.mysql.jdbc.Driver"
            jdbc_connection_string => "jdbc:mysql://localhost:3306/codingsolo"
            jdbc_user => "elastic"
            jdbc_password => "elastic"
            statement => "SELECT codingsolo.kunde_anschrift.kunde_id, 
								anschrift.id, 
								anschrift.anschrift_Strasse, 
								anschrift.anschrift_hausnummer, 
								anschrift.anschrift_postleitzahl, 
								anschrift.anschrift_ort, 
								anschrift.anschrift_erstellung, 
								land_name as Anschrift_land,
								land_kuerzel FROM codingsolo.kunde_anschrift
							LEFT JOIN codingsolo.anschrift as anschrift ON codingsolo.kunde_anschrift.anschrift_id = anschrift.id 	
							LEFT JOIN codingsolo.land as land ON anschrift.anschrift_land = land.id
							WHERE codingsolo.kunde_anschrift.kunde_id = :idparam;"
            parameters => {"idparam" => "id" }
            target => "kunde_anschrift"
        }

        ##jdbc_streaming Plugin add MORE Data from different Tables / Databases
        jdbc_streaming {
            jdbc_driver_library => "/driver/mysql-connector-java-8.0.19.jar"
            jdbc_driver_class => "com.mysql.jdbc.Driver"
            jdbc_connection_string => "jdbc:mysql://localhost:3306/codingsolo"
            jdbc_user => "elastic"
            jdbc_password => "elastic"
            statement =>  "SELECT id as bestellung_id, bestellung_datum, bestellung_status from codingsolo.bestellung WHERE codingsolo.bestellung.kunde_id = :idparam;"
			parameters => { "idparam" => "id" }
			target => "kunde_bestellung"            
        }

        ## Extracting all bestellung_id from Field:kunde_bestellung into a List of Strings
        ruby {
            code => '
                event.get("kunde_bestellung").each do |item|
                    if not event.get("bestellung_temp")
                        event.set("bestellung_temp", [item["bestellung_id"]])
                    else
                        event.set("bestellung_temp", event.get("bestellung_temp") + [item["bestellung_id"]])
                    end
                end
            '
        }

        ##jdbc_streaming Plugin add MORE Data from different Tables / Databases
        jdbc_streaming {
			jdbc_driver_library => "/driver/mysql-connector-java-8.0.19.jar"
			jdbc_driver_class => "com.mysql.jdbc.Driver"
			jdbc_connection_string => "jdbc:mysql://localhost:3306/codingsolo"
			jdbc_user => "elastic"
			jdbc_password => "elastic"
            statement => "SELECT 
							codingsolo.bestellung_artikel.id as bestellung_id,
							codingsolo.bestellung_artikel.anzahl,
							artikel.id,
							artikel.artikel_name,
							artikel.artikel_preis,
							artikel.artikel_status
						FROM codingsolo.bestellung_artikel 
						LEFT JOIN codingsolo.artikel as artikel ON codingsolo.bestellung_artikel.artikel_id = artikel.id WHERE codingsolo.bestellung_artikel.id in :idparam;"    
            parameters => { "idparam" => "bestellung_temp"}
			target => "bestellung_posten"        
        }

        ## Adding order-line to order MY GOAL is include all lines from one order into the single order
        ruby {
            code => '
                   event.get("bestellung_posten").each_with_index do |item, index_item|
                        event.get("kunde_bestellung").each_with_index do |order, index|
                            if order["bestellung_id"] == item["bestellung_id"]
                                if not event.get("[kunde_bestellung][#{index}][bestellung_posten]")
                                    event.set("[kunde_bestellung][#{index}][bestellung_posten]", [item])
                                else
                                    event.set("[kunde_bestellung][#{index}][bestellung_posten]", order["bestellung_posten"] + [item])
                                end
                            end
                        end
                   end 
            '
        }

        ##clean up
        mutate {
		  remove_field => [ "bestellung_posten"]
		  remove_field => [ "bestellung_temp"]
		}
    }

}

output {

    if[type] == "kundendaten" {
        elasticsearch {
            hosts => "localhost:9200"
            index => "kundendaten"
            document_type => "_doc"
            document_id => "%{id}"
			doc_as_upsert => true
			action => "update"
        }
    }

    stdout { codec => rubydebug }
}